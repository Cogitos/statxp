filtRT = function(dt, RT='RT', vars=NULL, fpass=NULL, sdv=NULL ){
# GT Vallet    --  Lyon 2 University
#   2013/07/01 --  v01
#   2014/05/01 --  v02 Adding vars as an option.
#                       Filtering only lowest or highest RT value.
#                       Adding the percentage of data filtered.
if( !is.null(sdv) ){
if( is.null(vars) ){
dt.fil = outliers(df, fpass, RT, sdv)
dt.filtered = dt.fil[[1]]
filtered = dt.fil[[2]]
}else{
dt.fil = dlply(df, vars, function(x) outliers(x, fpass, RT, sdv))
dt.filtered  = ldply(dt.fil, function(x) rbind(x[[1]]))
filtered = ldply(dt.fil, function(x) rbind(x[[2]]))
}
}
return(list(Data_Filtered=dt.filtered, Nb_Data_Filtered=filtered))
}
outliers  <- function(data, fpass=NULL, target, sdv=3){
#
#   A function to keep only the RT value within 'sdv' standard deviations from the mean.
#      Take a matrix of data 'data', the column number where are the RT values and the number of standard deviation to consider
#
#   The function will compute the high and low cut-off scores based on this formula
#            cut-off = mean +/- standard deviation.
#
#   Return the matrix with only the good RT values.
#
# GTV and BR - 13/10/2011 - v01
nb_tot = nrow(data)
### Filtering lowest and highest values from given thresholds ---------------
if( !is.null(fpass) ){
cur_obs = nrow(data)
if( !is.na(fpass[1]) ){
data = data[ data[,target]>=fpass[1], ]
}
filtered = cur_obs - nrow(data)
cur_obs = nrow(data)
if( !is.na(fpass[2]) ){
data = data[ data[,target]<=fpass[2], ]
}
filtered = c(filtered, cur_obs - nrow(data))
}
### Filtering lowest and highest values from a given standard deviation -----
cur_obs = nrow(data)
mean_cond  <- mean(data[,target], na.rm=T)  # Compute the mean of the matrix
std_dev    <- sd(data[,target], na.rm=T)    # Compute the standard deviation of the matrix
cut_off_high  <- mean_cond + sdv*std_dev    # Compute the high cut-off score
cut_off_low   <- mean_cond - sdv*std_dev    # Compute the low  cut-off score
# Find RT values within the two cut-off scores
data  <- data[ data[,target]<= cut_off_high & data[,target]>= cut_off_low,]
filtered = c(filtered, cur_obs-nrow(data))
ptot = round((sum(filtered)/nb_tot)*100, 2)
filtered = c(filtered, ptot)
names(filtered) = c('low-cutoff', 'high-cutoff', 'by_sdv', '%subtot')
return(list(data_filtered=data, filtered=filtered))
}
df1 = rbind(data.frame(Subj=1, Cond="Test", RT=rnorm(25, mean=550, sd=48)),
data.frame(Subj=1, Cond="Control", RT=rnorm(25, mean=680, sd=62)))
df2 = rbind(data.frame(Subj=2, Cond="Test", RT=rnorm(25, mean=585, sd=54)),
data.frame(Subj=2, Cond="Control", RT=rnorm(25, mean=720, sd=59)))
df= rbind(df1,df2)
df[5,3]  = df[5,3]+300
df[25,3] = df[5,3]+500
df[19,3] = df[19,3]-35
df[33,3] = df[33,3]+420
df[9,3]  = 50
df[13,3] = 4250
df[39,3] = 99
filtRT(df, RT='RT', vars=c('Subj', 'Cond'), fpass=c(100,1000), sdv=3)
library("plyr", lib.loc="/home/gtvallet/R/x86_64-pc-linux-gnu-library/3.1")
filtRT(df, RT='RT', vars=c('Subj', 'Cond'), fpass=c(100,1000), sdv=3)
filtRT(df, RT='RT', vars='Subj', fpass=c(100, NA), sdv=2)
df
df
df[100,3] = NA
df[97,3] = NA
filtRT(df, RT='RT', vars=c('Subj', 'Cond'), fpass=c(100,1000), sdv=3)
outilers(df, RT='RT', fpass=c(100, NA), sdv=2)
outliers(df, RT='RT', fpass=c(100, NA), sdv=2)
outliers(df, target='RT', fpass=c(100, NA), sdv=2)
df
data =df
target='RT'
fpass=c(100, NA)
sdv=2
nb_tot = nrow(data)
nb_tot
cur_obs = nrow(data)
data = data[ data[,target]>=fpass[1], ]
data
cond1 = rnorm(10, mean=555, sd=45)
cond2 = rnorm(10, mean=639, sd=33)
ttest = t.test(cond1, cond2)
ttest
#' Export t test results to APA format
#'
#' A function to format a t test of Student according to the
#'  APA guidelines. The output can be directly used in a
#'  Knitr/Sweave document.
#' The function can optionally export the related d of Cohen.
#'
#' @author
#' Guillaume T. Vallet \email{gtvallet@@gmail.com}, University of de Montreal (Canada);
#'
#' @param ttest An t.test object.
#' @param d A number representing the associated d of Cohen.
#' @keywords t test, format, APA, knitr/Sweave
#' @export
#' @examples
#' # Generate fake data of two groups to be compared
#' cond1 = rnorm(10, mean=555, sd=45)
#' cond2 = rnorm(10, mean=639, sd=33)
#'
#' # Compute the t test
#' ttest = t.test(cond1, cond2)
#'
#' # Export the t test result
#' ftt(ttest)
#'
ftt  <- function(ttest, d=NULL){
# GT Vallet -- Lyon2 University
#  2013/05/31 -- v01
# Extract the degree of freedom of the numerator and denominator
df = ttest$parameter
# Extract the t value and round it
t = round(ttest$statistic, 2)
# Extract the p value and format the outupt according to its significance
p = ttest$p.value
if( p < .05){
p = ", p < .05"
}else{
p = paste(", p = ", round(p, 2), sep="")
}
if( length(d) > 0 ){
str.ttest = paste("$t(", df, ") = ", t, p, ", d = ", round(d, 2) ,"$", sep="")
}else{ str.ttest = paste("$t(", df, ") = ", t, p, "$", sep="") }
return(str.ttest)
}
ftt(ttest)
ttest
cond1
cond2
t.test(cond1, cond2, paired=F)
round(ttest$statistic, 2)
ttest$parameter
# Extract the degree of freedom of the numerator and denominator
df = ttest$parameter
# Extract the t value and round it
t = round(ttest$statistic, 2)
# Extract the p value and format the outupt according to its significance
p = ttest$p.value
if( p < .05){
p = ", p < .05"
}else{
p = paste(", p = ", round(p, 2), sep="")
}
if( length(d) > 0 ){
str.ttest = paste("$t(", df, ") = ", t, p, ", d = ", round(d, 2) ,"$", sep="")
}else{ str.ttest = paste("$t(", df, ") = ", t, p, "$", sep="") }
str.ttest
d=NULL
# Extract the degree of freedom of the numerator and denominator
df = ttest$parameter
# Extract the t value and round it
t = round(ttest$statistic, 2)
# Extract the p value and format the outupt according to its significance
p = ttest$p.value
if( p < .05){
p = ", p < .05"
}else{
p = paste(", p = ", round(p, 2), sep="")
}
if( length(d) > 0 ){
str.ttest = paste("$t(", df, ") = ", t, p, ", d = ", round(d, 2) ,"$", sep="")
}else{ str.ttest = paste("$t(", df, ") = ", t, p, "$", sep="") }
str.ttest
df
#' Export t test results to APA format
#'
#' A function to format a t test of Student according to the
#'  APA guidelines. The output can be directly used in a
#'  Knitr/Sweave document.
#' The function can optionally export the related d of Cohen.
#'
#' @author
#' Guillaume T. Vallet \email{gtvallet@@gmail.com}, University of de Montreal (Canada);
#'
#' @param ttest An t.test object.
#' @param d A number representing the associated d of Cohen.
#' @keywords t test, format, APA, knitr/Sweave
#' @export
#' @examples
#' # Generate fake data of two groups to be compared
#' cond1 = rnorm(10, mean=555, sd=45)
#' cond2 = rnorm(10, mean=639, sd=33)
#'
#' # Compute the t test
#' ttest = t.test(cond1, cond2, paired=F)
#'
#' # Export the t test result
#' ftt(ttest)
#'
ftt  <- function(ttest, d=NULL){
# GT Vallet -- Lyon2 University
#  2013/05/31 -- v01
# Extract the degree of freedom of the numerator and denominator
df = round(ttest$parameter, 2)
# Extract the t value and round it
t = round(ttest$statistic, 2)
# Extract the p value and format the outupt according to its significance
p = ttest$p.value
if( p < .05){
p = ", p < .05"
}else{
p = paste(", p = ", round(p, 2), sep="")
}
if( length(d) > 0 ){
str.ttest = paste("$t(", df, ") = ", t, p, ", d = ", round(d, 2) ,"$", sep="")
}else{ str.ttest = paste("$t(", df, ") = ", t, p, "$", sep="") }
return(str.ttest)
}
ftt(ttest)
